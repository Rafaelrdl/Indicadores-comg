#!/usr/bin/env python3
"""
Demonstra√ß√£o completa da otimiza√ß√£o de sincroniza√ß√£o incremental por p√°ginas
Simula cen√°rio real onde sync √© interrompido e retomado
"""

import sys
import os
import time

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.abspath("."))

from app.services.sync_jobs import (
    create_job,
    get_last_synced_page,
    update_job_page,
    get_job_status,
    update_job,
    finish_job
)
from app.core.db import get_conn

def simulate_full_sync_interruption():
    """Simula uma sincroniza√ß√£o completa que √© interrompida."""
    print("üöÄ SIMULA√á√ÉO: Sincroniza√ß√£o interrompida na metade")
    print("=" * 60)
    
    # Cen√°rio: sync de 5,191 registros distribu√≠dos em 104 p√°ginas de 50 registros cada
    total_records = 5191
    records_per_page = 50
    total_pages = 104  # ceil(5191/50)
    
    # Criar job inicial
    job_id = create_job("delta", start_page=1)
    print(f"‚úÖ Sincroniza√ß√£o iniciada: {job_id}")
    
    # Simular progresso at√© metade (p√°gina 52)
    interrupted_at_page = 52
    
    print(f"üìÑ Processando p√°ginas 1 a {interrupted_at_page}...")
    for page in range(1, interrupted_at_page + 1):
        processed = page * records_per_page
        update_job_page(job_id, current_page=page, last_page_synced=page, total_pages=total_pages)
        update_job(job_id, processed=processed, total=total_records)
        
        if page % 10 == 0:  # Log a cada 10 p√°ginas
            print(f"   ‚úì P√°gina {page} - {processed} registros processados")
    
    # Simular interrup√ß√£o (n√£o chama finish_job)
    final_status = get_job_status(job_id)
    print(f"\nüí• SINCRONIZA√á√ÉO INTERROMPIDA!")
    print(f"   √öltima p√°gina processada: {final_status['last_page_synced']}")
    print(f"   Registros processados: {final_status['processed']}/{total_records}")
    print(f"   Progresso perdido: {final_status['percent']:.1f}%")
    
    return interrupted_at_page, total_records, total_pages


def simulate_resume_sync():
    """Simula a retomada da sincroniza√ß√£o do ponto onde parou."""
    print(f"\nüîÑ OTIMIZA√á√ÉO: Retomando sincroniza√ß√£o incremental")
    print("=" * 60)
    
    # Descobrir onde parou
    last_page = get_last_synced_page("delta")
    start_page = last_page + 1 if last_page > 0 else 1
    
    print(f"üîç √öltima p√°gina sincronizada: {last_page}")
    print(f"üìÑ Retomando a partir da p√°gina: {start_page}")
    
    # Cen√°rio: mesmos dados da simula√ß√£o anterior
    total_records = 5191
    records_per_page = 50
    total_pages = 104
    
    # Criar novo job come√ßando do ponto correto
    job_id = create_job("delta", start_page=start_page)
    print(f"‚úÖ Novo job criado: {job_id}")
    
    # Processar apenas as p√°ginas restantes
    remaining_pages = total_pages - last_page
    processed_before = last_page * records_per_page
    
    print(f"üìä Otimiza√ß√£o detectada:")
    print(f"   ‚Ä¢ P√°ginas j√° processadas: {last_page}")
    print(f"   ‚Ä¢ P√°ginas restantes: {remaining_pages}")
    print(f"   ‚Ä¢ Economia de tempo: {(last_page/total_pages)*100:.1f}%")
    
    # Simular processamento das p√°ginas restantes
    print(f"\nüìÑ Processando p√°ginas {start_page} a {total_pages}...")
    for page in range(start_page, total_pages + 1):
        processed = processed_before + ((page - start_page + 1) * records_per_page)
        if processed > total_records:
            processed = total_records
            
        update_job_page(job_id, current_page=page, last_page_synced=page, total_pages=total_pages)
        update_job(job_id, processed=processed, total=total_records)
        
        if page % 10 == 0 or page == total_pages:  # Log a cada 10 p√°ginas ou no final
            print(f"   ‚úì P√°gina {page} - {processed} registros processados")
    
    # Finalizar sincroniza√ß√£o
    finish_job(job_id, "success")
    final_status = get_job_status(job_id)
    
    print(f"\n‚úÖ SINCRONIZA√á√ÉO CONCLU√çDA!")
    print(f"   Status: {final_status['status']}")
    print(f"   Total processado: {final_status['processed']}/{total_records}")
    print(f"   Progresso: {final_status['percent']:.1f}%")
    
    return remaining_pages, total_pages - last_page


def show_performance_comparison():
    """Mostra compara√ß√£o de performance."""
    print(f"\nüìà COMPARA√á√ÉO DE PERFORMANCE")
    print("=" * 60)
    
    # Dados do cen√°rio
    total_records = 5191
    total_pages = 104
    interrupted_at = 52
    
    # Cen√°rio sem otimiza√ß√£o (sempre processa tudo)
    print(f"‚ùå SEM OTIMIZA√á√ÉO:")
    print(f"   ‚Ä¢ Primeira execu√ß√£o: {total_pages} p√°ginas ({total_records} registros)")
    print(f"   ‚Ä¢ Ap√≥s interrup√ß√£o: {total_pages} p√°ginas ({total_records} registros) - NOVAMENTE!")
    print(f"   ‚Ä¢ Total processado: {total_pages * 2} p√°ginas ({total_records * 2} registros)")
    
    # Cen√°rio com otimiza√ß√£o (continua de onde parou)
    remaining_pages = total_pages - interrupted_at
    print(f"\n‚úÖ COM OTIMIZA√á√ÉO:")
    print(f"   ‚Ä¢ Primeira execu√ß√£o: {interrupted_at} p√°ginas ({interrupted_at * 50} registros)")
    print(f"   ‚Ä¢ Ap√≥s interrup√ß√£o: {remaining_pages} p√°ginas ({total_records - (interrupted_at * 50)} registros)")
    print(f"   ‚Ä¢ Total processado: {total_pages} p√°ginas ({total_records} registros)")
    
    # Economia
    savings_pages = total_pages - remaining_pages  
    savings_records = total_records - (total_records - (interrupted_at * 50))
    savings_percent = (savings_pages / total_pages) * 100
    
    print(f"\nüí∞ ECONOMIA OBTIDA:")
    print(f"   ‚Ä¢ P√°ginas economizadas: {savings_pages}")
    print(f"   ‚Ä¢ Registros economizados: {savings_records}")
    print(f"   ‚Ä¢ Redu√ß√£o de tempo: {savings_percent:.1f}%")
    print(f"   ‚Ä¢ Processamento evitado: {interrupted_at}/{total_pages} p√°ginas")


if __name__ == "__main__":
    try:
        # Simular cen√°rio completo
        interrupted_page, total_rec, total_pgs = simulate_full_sync_interruption()
        remaining_pgs, processed_pgs = simulate_resume_sync()
        show_performance_comparison()
        
        print(f"\nüéØ RESULTADO FINAL:")
        print(f"‚úÖ Sistema de sincroniza√ß√£o incremental por p√°ginas IMPLEMENTADO!")
        print(f"‚úÖ Otimiza√ß√£o autom√°tica funcionando perfeitamente!")
        print(f"‚úÖ Economia significativa de tempo e recursos!")
        print(f"\nüí° BENEF√çCIOS PR√ÅTICOS:")
        print(f"‚Ä¢ Resistente a interrup√ß√µes de rede")
        print(f"‚Ä¢ Economia de recursos de servidor")
        print(f"‚Ä¢ Sincroniza√ß√£o mais eficiente")
        print(f"‚Ä¢ Melhor experi√™ncia do usu√°rio")
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
