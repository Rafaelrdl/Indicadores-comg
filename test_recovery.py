#!/usr/bin/env python3
"""
Teste espec√≠fico da fun√ß√£o get_last_synced_page
"""

import sys
import os

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.abspath("."))

from app.services.sync_jobs import (
    create_job,
    get_last_synced_page,
    update_job_page,
    update_job,
    finish_job
)

def test_realistic_scenario():
    """Testa cen√°rio mais real√≠stico com jobs finalizados."""
    print("üß™ TESTE: Recupera√ß√£o de √∫ltima p√°gina sincronizada")
    print("=" * 60)
    
    # 1. Simular primeira sincroniza√ß√£o completa
    print("üìã 1. Primeira sincroniza√ß√£o completa...")
    job1 = create_job("delta", start_page=1)
    
    # Simular processamento completo at√© p√°gina 30
    for page in range(1, 31):
        update_job_page(job1, current_page=page, last_page_synced=page, total_pages=100)
        update_job(job1, processed=page * 50, total=5000)
    
    # Finalizar como sucesso
    finish_job(job1, "success")
    print(f"‚úÖ Primeira sync finalizada: 30 p√°ginas processadas")
    
    # 2. Verificar se a fun√ß√£o recupera corretamente
    last_page = get_last_synced_page("delta")
    print(f"üîç √öltima p√°gina recuperada: {last_page}")
    
    # 3. Simular segunda sincroniza√ß√£o (incremental)
    print(f"\nüìã 2. Segunda sincroniza√ß√£o incremental a partir da p√°gina {last_page + 1}...")
    job2 = create_job("delta", start_page=last_page + 1)
    
    # Simular processamento das p√°ginas restantes
    for page in range(last_page + 1, 51):  # 31 at√© 50
        update_job_page(job2, current_page=page, last_page_synced=page, total_pages=100)
        update_job(job2, processed=page * 50, total=5000)
    
    # Finalizar segunda sync
    finish_job(job2, "success")
    print(f"‚úÖ Segunda sync finalizada: p√°ginas {last_page + 1} a 50 processadas")
    
    # 4. Verificar novamente a √∫ltima p√°gina
    final_last_page = get_last_synced_page("delta")
    print(f"üîç Nova √∫ltima p√°gina recuperada: {final_last_page}")
    
    # 5. Demonstrar economia
    print(f"\nüìä DEMONSTRA√á√ÉO DE ECONOMIA:")
    print(f"   ‚Ä¢ Sem otimiza√ß√£o: processaria 50 p√°ginas novamente = 2,500 registros")
    print(f"   ‚Ä¢ Com otimiza√ß√£o: processou apenas {50 - last_page} p√°ginas = {(50 - last_page) * 50} registros")
    print(f"   ‚Ä¢ Economia: {((last_page / 50) * 100):.1f}% de processamento evitado!")
    
    return last_page, final_last_page


if __name__ == "__main__":
    try:
        first_page, second_page = test_realistic_scenario()
        
        print(f"\nüéØ RESULTADO DO TESTE:")
        print(f"‚úÖ Primeira recupera√ß√£o: {first_page} p√°ginas")
        print(f"‚úÖ Segunda recupera√ß√£o: {second_page} p√°ginas")
        print(f"‚úÖ Sistema de recupera√ß√£o funcionando corretamente!")
        
        if first_page > 0 and second_page > first_page:
            print(f"‚úÖ Otimiza√ß√£o incremental VALIDADA!")
        else:
            print(f"‚ùå Algo n√£o funcionou como esperado")
            
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()
