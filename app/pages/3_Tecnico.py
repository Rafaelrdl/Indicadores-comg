"""P√°gina de an√°lise de desempenho de t√©cnicos usando nova arquitetura."""

import json
import sys
from pathlib import Path

import pandas as pd
import streamlit as st


# Configura√ß√£o de imports flex√≠vel para diferentes contextos de execu√ß√£o
current_dir = Path(__file__).parent
app_dir = current_dir.parent
root_dir = app_dir.parent

# Adicionar paths necess√°rios
if str(app_dir) not in sys.path:
    sys.path.insert(0, str(app_dir))
if str(root_dir) not in sys.path:
    sys.path.insert(0, str(root_dir))

# Imports flex√≠veis que funcionam em diferentes contextos
try:
    # Tentar importar sem prefixo app. (quando executado do diret√≥rio app)
    from arkmeds_client.client import ArkmedsClient
    from services.repository import get_technicians_df
    from ui.components import (
        DataTable,
        DistributionCharts,
        KPICard,
        MetricsDisplay,
        TimeSeriesCharts,
    )
    from ui.filters import render_filters, show_active_filters
    from ui.utils import run_async_safe
except ImportError:
    try:
        # Tentar importar com prefixo app. (quando executado do diret√≥rio raiz)
        from app.arkmeds_client.client import ArkmedsClient
        from app.services.repository import get_technicians_df
        from app.ui.components import (
            DataTable,
            DistributionCharts,
            KPICard,
            MetricsDisplay,
            TimeSeriesCharts,
        )
        from app.ui.filters import render_filters, show_active_filters
        from app.ui.utils import run_async_safe
    except ImportError as e:
        st.error(f"Erro ao importar m√≥dulos: {e}")
        st.stop()
# Core imports
from app.core import DataValidationError
from app.core.logging import app_logger
from app.data.validators import DataValidator
from app.ui.layouts import PageLayout, SectionLayout


def main():
    """Fun√ß√£o principal da p√°gina de t√©cnicos usando nova arquitetura."""

    # ========== CONTROLES NA SIDEBAR ==========
    with st.sidebar:
        st.markdown("---")

        # Badge do scheduler autom√°tico
        from app.ui.components.scheduler_status import render_scheduler_badge

        render_scheduler_badge()

        st.markdown("---")

        st.markdown("**üîÑ Sincroniza√ß√£o**")
        from app.ui.components.refresh_controls import (
            render_compact_refresh_button,
            render_sync_status,
        )

        render_compact_refresh_button(["technicians", "orders"])

        # Status dos dados
        with st.expander("üìä Status"):
            render_sync_status(["technicians", "orders"], compact_mode=True)

    # Usar novo sistema de layout
    layout = PageLayout(
        title="An√°lise de T√©cnicos",
        description="Desempenho e atividades da equipe t√©cnica",
        icon="üë∑",
    )

    layout.render_header()

    with layout.main_content():
        # Status: Temporariamente removendo renderiza√ß√£o de filtros API
        # TODO: Implementar filtros baseados em dados do Repository
        st.info("üîß Filtros em migra√ß√£o - usando dados locais do SQLite")

        # Buscar dados
        try:
            users = fetch_technician_data_cached()

            # Renderizar se√ß√µes com novos layouts
            with SectionLayout.metric_section("üìä Vis√£o Geral da Equipe"):
                render_technician_overview(users)

            with SectionLayout.data_section("üìã Lista de T√©cnicos"):
                render_technician_table(users)

            # Se√ß√£o em constru√ß√£o
            with SectionLayout.info_section("üöß Funcionalidades em Desenvolvimento"):
                st.markdown(
                    """
                ### üéØ M√©tricas de Performance
                - **Produtividade por T√©cnico**: Ordens conclu√≠das por per√≠odo
                - **Tempo M√©dio de Resolu√ß√£o**: MTTR por tipo de ordem
                - **Efici√™ncia por Localiza√ß√£o**: Performance geogr√°fica
                - **An√°lise de Compet√™ncias**: Especializa√ß√£o por equipamento
                
                ### üìà Dashboards Avan√ßados
                - **Heatmaps de Atividade**: Visualiza√ß√£o temporal
                - **Ranking de Performance**: Comparativo entre t√©cnicos
                - **Alertas de Produtividade**: Notifica√ß√µes autom√°ticas
                
                ### üéÆ Gamifica√ß√£o
                - **Sistema de Pontos**: Recompensas por performance
                - **Badges de Conquista**: Reconhecimento de especializa√ß√£o
                - **Leaderboards**: Rankings motivacionais
                """
                )

        except Exception as e:
            st.error(f"Erro ao carregar dados: {e!s}")


async def fetch_technician_data() -> list[dict]:
    """Busca dados dos t√©cnicos usando Repository (SQLite local)."""
    try:
        # Usar Repository em vez da API
        technicians_df = get_technicians_df()

        # Converter para lista de dicts e validar
        if not technicians_df.empty:
            # Validar DataFrame
            technicians_df = DataValidator.validate_dataframe(
                technicians_df, required_columns=["id", "nome"], name="T√©cnicos"
            )
            return technicians_df.to_dict("records")

        return []

    except DataValidationError as e:
        st.error("‚ö†Ô∏è Dados de t√©cnicos inv√°lidos")
        app_logger.log_error(e, {"context": "technician_validation"})
        raise e
    except Exception as e:
        st.error("‚ùå Erro ao buscar dados de t√©cnicos")
        app_logger.log_error(e, {"context": "fetch_technician_data_repository"})
        return []


def fetch_technician_data_cached() -> list[dict]:
    """Busca dados de t√©cnicos do banco local em vez da API."""
    try:
        app_logger.log_info("üë∑ Buscando dados de t√©cnicos do SQLite local...")

        # ========== NOVA ABORDAGEM: LEITURA DIRETA DO SQLITE ==========
        from app.services.repository import get_database_stats, get_technicians_df

        # Verificar estat√≠sticas do banco
        stats = get_database_stats()
        technicians_count = stats.get("technicians_count", 0)

        # Se banco est√° vazio, avisar usu√°rio para executar sincroniza√ß√£o
        if technicians_count == 0:
            st.warning(
                """
            üì≠ **Dados n√£o encontrados no banco local**
            
            Para visualizar os dados de t√©cnicos, √© necess√°rio executar a sincroniza√ß√£o inicial.
            Use os controles na sidebar ou aguarde a sincroniza√ß√£o autom√°tica.
            """
            )
            return []

        # Buscar t√©cnicos do SQLite
        technicians_df = get_technicians_df(limit=500)

        if technicians_df.empty:
            st.warning("üì≠ Nenhum t√©cnico encontrado no banco local")
            return []

        # Converter technicians_df para lista de dicts compat√≠veis
        technicians_list = []
        for _, row in technicians_df.iterrows():
            try:
                payload = (
                    json.loads(row["payload"])
                    if isinstance(row["payload"], str)
                    else row["payload"]
                )
                technicians_list.append(
                    {
                        "id": payload.get("id"),
                        "nome": payload.get("nome", ""),
                        "email": payload.get("email", ""),
                        "ativo": payload.get("ativo", True),
                        "is_active": payload.get("ativo", True),  # Compatibilidade
                        **payload,  # Incluir todos os outros campos
                    }
                )
            except Exception as e:
                app_logger.log_error(e, {"context": "processar_tecnico"})
                continue

        app_logger.log_info(f"‚úÖ Carregados {len(technicians_list)} t√©cnicos do SQLite")
        return technicians_list

    except Exception as e:
        app_logger.log_error(e, {"context": "fetch_technician_data_cached_sqlite"})
        st.error(f"‚ö†Ô∏è Erro ao carregar dados: {e!s}")
        return []


def render_technician_overview(users: list[dict]) -> None:
    """Renderiza vis√£o geral dos t√©cnicos com novos componentes."""

    # KPIs principais
    total_techs = len(users) if users else 0
    active_techs = len([u for u in users if u.get("is_active", True)]) if users else 0
    avg_experience = calculate_avg_experience(users)

    # Usar novos componentes KPI
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        KPICard.render(title="Total de T√©cnicos", value=total_techs, icon="üë∑", color="primary")

    with col2:
        KPICard.render(title="T√©cnicos Ativos", value=active_techs, icon="‚úÖ", color="success")

    with col3:
        rate = (active_techs / total_techs * 100) if total_techs > 0 else 0
        KPICard.render(title="Taxa de Atividade", value=f"{rate:.1f}%", icon="üìä", color="info")

    with col4:
        KPICard.render(
            title="Experi√™ncia M√©dia",
            value=f"{avg_experience:.1f} anos",
            icon="üéØ",
            color="warning",
        )


def render_technician_table(users: list[dict]) -> None:
    """Renderiza tabela de t√©cnicos com novo componente DataTable."""

    if not users:
        st.warning("üì≠ Nenhum t√©cnico encontrado")
        return

    # Preparar dados para tabela
    df = pd.DataFrame(users)

    # Configurar colunas da tabela
    column_config = {
        "name": st.column_config.TextColumn("Nome", width="medium"),
        "email": st.column_config.TextColumn("Email", width="large"),
        "role": st.column_config.TextColumn("Fun√ß√£o", width="small"),
        "is_active": st.column_config.CheckboxColumn("Ativo", width="small"),
        "last_login": st.column_config.DatetimeColumn("√öltimo Login", width="medium"),
    }

    # Usar novo componente DataTable
    DataTable.render(
        data=df,
        column_config=column_config,
        searchable_columns=["name", "email"],
        filterable_columns=["role", "is_active"],
        height=400,
    )


def calculate_avg_experience(users: list[dict]) -> float:
    """Calcula experi√™ncia m√©dia dos t√©cnicos."""
    if not users:
        return 0.0

    experiences = []
    for user in users:
        # Simular c√°lculo de experi√™ncia baseado em data de cria√ß√£o
        created_date = user.get("date_joined")
        if created_date:
            # L√≥gica simplificada - em produ√ß√£o usar datas reais
            experiences.append(2.5)  # M√©dia simulada

    return sum(experiences) / len(experiences) if experiences else 0.0


# Executar fun√ß√£o principal
if __name__ == "__main__":
    main()
