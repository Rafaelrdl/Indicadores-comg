[tool.poetry]
package-mode = true
packages = [{include = "app"}]

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-asyncio = "^0.24.0"
respx = "^0.21.0"
ruff = "^0.1.0"
black = "^23.0.0"
structlog = "^23.0.0"

[project]
name = "indicadores-comg"
version = "0.1.0"
description = "Aplicativo de geração de indicadores"
authors = [
    {name = "Rafael Ribeiro",email = "rafaelrdlessa@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "streamlit (>=1.30,<2.0)",
    "httpx (>=0.27,<0.28)",
    "pydantic (>=2,<3)",
    "pandas (>=2,<3)",
    "plotly (>=5,<6)",
    "cachetools (>=5,<6)",
    "python-dateutil (>=2,<3)",
    "pydantic-settings (>=2.10.1,<3.0.0)",
    "apscheduler (>=3.11.0,<4.0.0)",
    "streamlit-autorefresh (>=1.0.1,<2.0.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# ===== LINTING & FORMATTING =====

[tool.ruff]
line-length = 100
target-version = "py312"
src = ["app", "tests", "scripts"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by Black)
    "B008",   # do not perform function calls in argument defaults
    "N806",   # non-lowercase variable in function (for DataFrame df)
    "SIM108", # use ternary operator instead of if-else (readability)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "N802",  # function name should be lowercase (test_* patterns)
    "N803",  # argument name should be lowercase (fixtures)
]
"scripts/**/*.py" = [
    "N999",  # invalid module name (scripts can have special names)
]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-single-line = false
lines-after-imports = 2

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | _build
  | build
  | dist
  | \.mypy_cache
)/
'''

