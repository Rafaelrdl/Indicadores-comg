"""Script para testar se a pagina√ß√£o est√° funcionando corretamente."""

import asyncio
from datetime import date, timedelta
import sys
import pathlib

# Adicionar o diret√≥rio app ao path
ROOT = pathlib.Path(__file__).parent / "app"
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))

from arkmeds_client.client import ArkmedsClient


async def test_pagination():
    """Testa se a pagina√ß√£o est√° buscando todos os registros."""
    
    print("üîç Testando pagina√ß√£o da API Arkmeds...")
    print("=" * 70)
    
    client = ArkmedsClient.from_session()
    
    # Teste 1: Buscar sem filtros (√∫ltimos 30 dias)
    end_date = date.today()
    start_date = end_date - timedelta(days=30)
    
    print(f"\nüìÖ Per√≠odo de teste: {start_date} at√© {end_date}")
    
    # Buscar com m√©todo antigo (sem pagina√ß√£o) - simulando o problema
    print(f"\n{'='*70}")
    print("1Ô∏è‚É£ TESTE: Simulando busca com uma √∫nica p√°gina (problema original)")
    print("="*70)
    
    try:
        # Simular o comportamento antigo (apenas primeira p√°gina)
        client_http = await client._get_client()
        response = await client_http.get(
            "/api/v5/chamado/",
            params={
                "data_criacao__gte": start_date.isoformat(),
                "data_criacao__lte": end_date.isoformat(),
                "page_size": 25,  # Padr√£o da API que causava o problema
                "page": 1,
                "arquivadas": "true"
            }
        )
        data = response.json()
        single_page_count = len(data.get("results", []))
        total_count = data.get("count", 0)
        pages_needed = (total_count + 24) // 25
        
        print(f"   üìä Registros na primeira p√°gina: {single_page_count}")
        print(f"   üìä Total de registros dispon√≠veis na API: {total_count}")
        print(f"   üìä P√°ginas necess√°rias para buscar tudo: {pages_needed}")
        print(f"   ‚ö†Ô∏è  PROBLEMA: S√≥ {single_page_count} de {total_count} registros seriam usados!")
        
    except Exception as e:
        print(f"   ‚ùå Erro no teste de p√°gina √∫nica: {e}")
    
    # Buscar com m√©todo novo (com pagina√ß√£o completa)
    print(f"\n{'='*70}")
    print("2Ô∏è‚É£ TESTE: Busca com pagina√ß√£o completa (m√©todo corrigido)")
    print("="*70)
    
    try:
        all_results = await client.list_os(
            data_criacao__gte=start_date.isoformat(),
            data_criacao__lte=end_date.isoformat()
        )
        print(f"\nüéâ SUCESSO: {len(all_results)} registros obtidos com pagina√ß√£o completa!")
        
        if len(all_results) > 25:
            print("‚úÖ Pagina√ß√£o funcionando corretamente!")
            print(f"‚úÖ Foram buscados {len(all_results)} registros (muito mais que 25)")
        else:
            print("‚ö†Ô∏è Poucos registros encontrados. Talvez n√£o haja dados suficientes no per√≠odo.")
            
    except Exception as e:
        print(f"   ‚ùå Erro no teste de pagina√ß√£o completa: {e}")
        import traceback
        traceback.print_exc()
    
    # Teste 3: Verificar per√≠odo maior (Janeiro at√© hoje)
    print(f"\n{'='*70}")
    print("3Ô∏è‚É£ TESTE: Per√≠odo maior (Janeiro/2025 at√© hoje)")
    print("="*70)
    
    try:
        jan_start = date(2025, 1, 1)
        all_results_year = await client.list_os(
            data_criacao__gte=jan_start.isoformat(),
            data_criacao__lte=end_date.isoformat()
        )
        
        total_year = len(all_results_year)
        print(f"\nüìä RESULTADO: {total_year} registros de {jan_start} at√© {end_date}")
        
        if total_year > 0:
            # An√°lise b√°sica dos dados
            with_os = sum(1 for r in all_results_year if r.ordem_servico)
            print(f"   üìã Chamados com ordens de servi√ßo: {with_os}")
            print(f"   üìã Chamados sem ordens de servi√ßo: {total_year - with_os}")
            
            # Mostrar alguns IDs para verificar variedade
            if total_year >= 5:
                ids = [r.id for r in all_results_year[:5]]
                print(f"   üÜî Primeiros 5 IDs: {ids}")
                
            if total_year > 100:
                print(f"‚úÖ EXCELENTE: {total_year} registros √© muito mais que 25!")
                print("‚úÖ A pagina√ß√£o est√° funcionando perfeitamente!")
            elif total_year > 25:
                print(f"‚úÖ BOM: {total_year} registros indica que a pagina√ß√£o est√° funcionando")
            else:
                print(f"‚ö†Ô∏è ATEN√á√ÉO: Apenas {total_year} registros encontrados")
                print("   Pode ser que realmente n√£o existam muitos dados no per√≠odo")
        else:
            print("‚ùå Nenhum registro encontrado para o per√≠odo")
            
    except Exception as e:
        print(f"   ‚ùå Erro no teste de per√≠odo longo: {e}")
        import traceback
        traceback.print_exc()
    
    # Fechar cliente
    try:
        await client.close()
    except Exception:
        pass
    
    print(f"\n{'='*70}")
    print("‚úÖ TESTE CONCLU√çDO!")
    print("="*70)
    print("Se voc√™ viu n√∫meros muito maiores que 25, a pagina√ß√£o est√° funcionando!")
    print("Agora os KPIs na aplica√ß√£o devem mostrar valores corretos.")
    print("="*70)


if __name__ == "__main__":
    asyncio.run(test_pagination())
